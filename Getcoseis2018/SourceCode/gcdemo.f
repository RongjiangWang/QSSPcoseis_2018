      program gcdemo
      implicit none
c
      integer*4 runtime
      integer*4 time
c
      integer*4 i,j,ierr,iz,nz,flen,ilat,nlat,ilon,nlon
      integer*4 ir,nr,nr1,nr2,dnr,is,ns,ns1,ns2,dns
      integer*4 istype,isdata,iobsarray
      real*8 lat1,lat2,dlat,lon1,lon2,dlon,z1,z2,dz,lat,lon,dep
      real*8 moment,strike,dip,rake,mtt,mpp,mrr,mtp,mpr,mrt
      logical*2 select
c
      integer*4 iswap(100)
      real*8 dswap(100)
      logical*2 selobs(6)
c
      character*80 spatgrndir,outputfile,sourcedata,obsarray
      character*180 text
c
      real*8,allocatable:: latr(:),lonr(:),depr(:),
     &                     deps(:),lats(:),lons(:),spa(:,:),
     &                     obs(:,:),dobs(:,:)
c
      integer*4 nsnrmax
      real*8 km2m
      data nsnrmax/33554432/
      data km2m/1.0d+03/
c
      print *,'######################################################'
      print *,'#        Welcome to the program GETCOSEIS            #'
      print *,'#                  (Version 2018)                    #'
      print *,'#                                                    #'
      print *,'#     GGGG   EEEEE   TTTTT    CCC    OOO     SSS     #'
      print *,'#    G       E         T     C      O   O   S        #'
      print *,'#    G  GG   EEEE      T     C      O   O    SS      #'
      print *,'#    G   G   E         T     C      O   O      S     #'
      print *,'#     GGGG   EEEEE     T      CCC    OOO    SSS      #'
      print *,'#                                                    #'
      print *,'#                  to calculate                      #'
      print *,'#     static seismic displacement, strain/stress,    #'
      print *,'#  ground rotation, and gravity/geopotential changes #'
      print *,'#   using the space-domain Green function database   #'
      print *,'#  pre-prepared with the accompaying code QSSPGRNCO  #'
      print *,'#      for a spherically symmetric, isotropic,       #'
      print *,'#        elastic, and self-gravitating earth         #'
      print *,'#                                                    #'
      print *,'#                       by                           #'
      print *,'#                 Rongjiang Wang                     #'
      print *,'#   (wang@gfz-potsdam.de, wangatberlin@gmail.com)    #'
      print *,'#    GFZ German Research Centre for Geosciences      #'
      print *,'#             Last modified: June 2018               #'
      print *,'#                                                    #'
      print *,'# Reference:                                         #'
      print *,'# Wang et al. (2017). Complete synthetic seismograms #'
      print *,'#  based on a spherical self-gravitating Earth model #'
      print *,'#  with an atmosphere-ocean-mantle-core structure.   #'
      print *,'#  GJI, 210, 1739-1764. doi: 10.1093/gji/ggx259.     #'
      print *,'######################################################'
      print *,'                                                      '
c
      print *,'======================================================'
      print *,'General information for user:'
      print *,'At the first time, all input parameters are normally'
      print *,'read via stdin. They will be recorded by the system'
      print *,'in a logfile with the fixed name "getcoseis_stdin.log".'
      print *,'The user can rename this logfile to an input file, e.g.,'
      print *,'"mygetcoseis.inp" and modify it, if necessary, for the'
      print *,'next use more handily by the command with piping:'
      print *,'"getcoseis2018 < mygetcoseis.inp".'
      print *,'======================================================'
      print *,'                                                      '
c
      open(11,file='getcoseis_stdin.log',status='unknown')
c
      write(*,'(a)')' space-domain Green function database'
     &            //' generated by QSSPGRNCO: '
      call getline(5,text)
      read(text,'(a)')spatgrndir
      write(11,'(a)')'# space-domain Green function database generated'
     &             //' by QSSPGRNCO: '
      write(11,'(a)')' '//spatgrndir
c
      write(*,'(a)')' output file: '
      call getline(5,text)
      read(text,'(a)')outputfile
      write(11,'(a)')'# output file: '
      write(11,'(a)')' '//outputfile
c
      write(*,'(a)')' select output observables (1/0 = yes/no) '
      write(*,'(a)')' displacement_vector strain_tensor rotation_vector'
     &            //' stress_tensor gravity_vector geopotential:'
      write(*,'(a)')' (e.g., 1 1 1 1 1 1 for selecting all,'
     &            //' 1 0 0 0 0 0 for selcting displacement only, etc.)'
      call getline(5,text)
      read(text,*)(iswap(i),i=1,6)
c
      j=0
      do i=1,6
        if(iswap(i).ne.0.and.iswap(i).ne.1)then
          stop ' Error in gcdemo: wrong selection'
     &       //' of output observables!'
        else
          selobs(i)=iswap(i).eq.1
          j=j+1
        endif
      enddo
      if(j.le.0)then
        stop ' Error in gcdemo: no selection of output observables!'
      endif
c
      write(11,'(a)')'# select output observables (1/0 = yes/no) '
      write(11,'(a)')'# displacement_vector strain_tensor'
     &             //' rotation_vector'
     &             //' stress_tensor gravity_vector geopotential:'
      write(11,'(a)')'# (e.g., 1 1 1 1 1 1 for selecting all,'
     &            //' 1 0 0 0 0 0 for selcting displacement only, etc.)'
      write(11,'(6i3)')(iswap(i),i=1,6)
c
      write(*,'(a)')' select source type'
      write(*,'(a)')' (0/1/2 = '
     &       //'double_couple/moment_tensor/anelastic_strain_tensor):'
      call getline(5,text)
      read(text,*)istype
      write(11,'(a)')'# select source type'
      write(11,'(a)')'# (0/1/2 = '
     &       //'double_couple/moment_tensor/anelastic_strain_tensor):'
      write(11,'(i3)')istype
      if(istype.lt.0.or.istype.gt.2)then
        stop ' Error in gcdemo: bad choice of source parameter format!'
      endif
c
      write(*,'(a)')' select reading source parameters '
     &            //'from (0) standard input or (1) file:'
      call getline(5,text)
      read(text,*)isdata
      write(11,'(a)')'# select reading source parameters '
     &            //'from (0) standard input or (1) file:'
      write(11,'(i5)')isdata
      if(isdata.lt.0.or.isdata.gt.1)then
        stop ' Error in gcdemo: bad way for reading source parameters!'
      endif
c
      if(isdata.eq.0)then
        write(*,'(a)')' '
        write(*,'(a)')' number of discrete sources:'
        call getline(5,text)
        read(text,*)ns
        write(11,'(a)')'# number of discrete sources:'
        write(11,'(i5)')ns
      else
        if(istype.eq.0)then
          write(*,'(a)')' (one header line followed by 7 columns) '
          write(*,'(a)')' (Lat,Lon[deg],Dep[km],'
     &                //'Moment[Nm],Strike,Dip,Rake[deg]):'
          call getline(5,text)
          read(text,'(a)')sourcedata
          write(11,'(a)')'# (one header line followed by 7 columns) '
          write(11,'(a)')'# (Lat,Lon[deg],Dep[km],'
     &                //'Moment[Nm],Strike,Dip,Rake[deg]):'
          write(11,'(a)')' '//sourcedata
c
c         test read to find the number of point sources
c
          open(20, file=sourcedata,status='unknown')
          read(20,'(a)')text
          ns=0
101       read(20,*,end=102,err=102)(dswap(i),i=1,7)
          ns=ns+1
          goto 101
102       close(20)
        else if(istype.eq.1)then
          write(*,'(a)')' (one header line followed by 9 columns) '
          write(*,'(a)')' (Lat,Lon[deg],Dep[km],'
     &                //' Mee,Men,Mez,Mnn,Mnz,Mzz[Nm]):'
          read(text,'(a)')sourcedata
          write(11,'(a)')'# (one header line followed by 9 columns) '
          write(11,'(a)')'# (Lat,Lon[deg],Dep[km],'
     &                //'Mee,Men,Mez,Mnn,Mnz,Mzz[Nm]):'
          write(11,'(a)')' '//sourcedata
          open(20, file=sourcedata,status='unknown')
          read(20,'(a)')text
          ns=0
201       read(20,*,end=202,err=202)(dswap(i),i=1,9)
          ns=ns+1
          goto 201
202       close(20)
        else
          write(*,'(a)')' (one header line followed by 10 columns) '
          write(*,'(a)')' (Lat,Lon[deg],Dep[km],'
     &                //'Vol[m^3],Eee,Een,Eez,Enn,Enz,Ezz[Nm]):'
          call getline(5,text)
          read(text,'(a)')sourcedata
          write(11,'(a)')'# (one header line followed by 10 columns) '
          write(11,'(a)')'# (Lat,Lon[deg],Dep[km],'
     &                //'Vol[m^3],Eee,Een,Eez,Enn,Enz,Ezz[Nm]):'
          write(11,'(a)')' '//sourcedata
          open(20, file=sourcedata,status='unknown')
          read(20,'(a)')text
301       read(20,*,end=302,err=302)(dswap(i),i=1,9)
          ns=ns+1
          goto 301
302       close(20)
        endif
        write(*,'(i7,a)')ns,' point sources read'
        write(11,'(a,i7,a)')'# ',ns,' point sources read'
      endif
c
      if(ns.le.0)then
        stop ' Error in gcdemo: no point source found!'
      endif
c
      allocate(deps(ns),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: deps not allocated!'
      allocate(lats(ns),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lats not allocated!'
      allocate(lons(ns),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lons not allocated!'
      allocate(spa(0:6,ns),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: spa not allocated!'
c
      if(isdata.eq.0)then
        write(*,'(a)')'       List all source parameters'
        write(11,'(a)')'#       List all source parameters'
        if(istype.eq.0)then
          write(*,'(a)')'    Lat[deg]    Lon[deg]     Dep[km]'
     &                //' Moment[Nm]'
     &                //' Strike[deg]    Dip[deg]   Rake[deg]:'
          write(11,'(a)')'#   Lat[deg]    Lon[deg]     Dep[km]'
     &                //'    Moment[Nm]'
     &                //' Strike[deg]    Dip[deg]   Rake[deg]:'
          do is=1,ns
            call getline(5,text)
            read(text,*)lats(is),lons(is),deps(is),
     &                  moment,strike,dip,rake
            write(11,'(3f12.4,E14.6,3f12.4)')lats(is),lons(is),deps(is),
     &                                moment,strike,dip,rake
            deps(is)=deps(is)*km2m
            spa(0,is)=0.d0
            call moments(moment,strike,dip,rake,
     &                   mtt,mpp,mrr,mtp,mpr,mrt)
            spa(1,is)=mpp
            spa(2,is)=-mtp
            spa(3,is)=mpr
            spa(4,is)=mtt
            spa(5,is)=-mrt
            spa(6,is)=mrr
          enddo
        else if(istype.eq.1)then
          write(*,'(a)')'    Lat[deg]    Lon[deg]     Dep[km]'
     &                //' Mee    Men    Mez    Mnn    Mnz    Mzz[Nm]:'
          write(11,'(a)')'#    Lat[deg]    Lon[deg]     Dep[km]'
     &                //' Mee    Men    Mez    Mnn    Mnz    Mzz[Nm]:'
          do is=1,ns
            call getline(5,text)
            read(text,*)lats(is),lons(is),deps(is),
     &               spa(1,is),spa(2,is),spa(3,is),
     &               spa(4,is),spa(5,is),spa(6,is)
            write(11,'(3f10.4,6E14.6)')lats(is),lons(is),deps(is),
     &                          spa(1,is),spa(2,is),spa(3,is),
     &                          spa(4,is),spa(5,is),spa(6,is)
            deps(is)=deps(is)*km2m
            spa(0,is)=0.d0
          enddo
        else if(istype.eq.2)then
          write(*,'(a)')'    Lat[deg]    Lon[deg]     Dep[km]'
     &                //'    Vol[m^3]    Eee    Een    Eez'
     &                //'    Enn    Enz    Ezz:'
          write(11,'(a)')'#    Lat[deg]    Lon[deg]     Dep[km]'
     &                //'    Vol[m^3]    Eee    Een    Eez'
     &                //'    Enn    Enz    Ezz:'
          do is=1,ns
            call getline(5,text)
            read(text,*)lats(is),lons(is),deps(is),
     &               spa(0,is),spa(1,is),spa(2,is),spa(3,is),
     &                         spa(4,is),spa(5,is),spa(6,is)
            write(11,'(3f10.4,7E14.6)')lats(is),lons(is),deps(is),
     &                spa(0,is),spa(1,is),spa(2,is),spa(3,is),
     &                          spa(4,is),spa(5,is),spa(6,is)
            deps(is)=deps(is)*km2m
          enddo
        endif
      else
        open(20, file=sourcedata,status='unknown')
        read(20,'(a)')text
        if(istype.eq.0)then
          do is=1,ns
            call skipdoc(20)
            read(20,*)lats(is),lons(is),deps(is),
     &                moment,strike,dip,rake
            deps(is)=deps(is)*km2m
            call moments(moment,strike,dip,rake,
     &                   mtt,mpp,mrr,mtp,mpr,mrt)
            spa(0,is)=0.d0
            spa(1,is)=mpp
            spa(2,is)=-mtp
            spa(3,is)=mpr
            spa(4,is)=mtt
            spa(5,is)=-mrt
            spa(6,is)=mrr
          enddo
        else if(istype.eq.1)then
          do is=1,ns
            call skipdoc(20)
            read(20,*)lats(is),lons(is),deps(is),
     &                spa(1,is),spa(2,is),spa(3,is),
     &                spa(4,is),spa(5,is),spa(6,is)
            deps(is)=deps(is)*km2m
            spa(0,is)=0.d0
          enddo
        else
          do is=1,ns
            call skipdoc(20)
            read(20,*)lats(is),lons(is),deps(is),
     &                spa(0,is),spa(1,is),spa(2,is),spa(3,is),
     &                          spa(4,is),spa(5,is),spa(6,is)
            deps(is)=deps(is)*km2m
          enddo
        endif
        close(20)
      endif
c
      write(*,'(a)')' read obs. locations '
     &            //'from (0) standard input or (1) file:'
      call getline(5,text)
      read(text,*)iobsarray
      write(11,'(a)')'#  read obs. locations '
     &            //'from (0) standard input or (1) file:'
      write(11,'(i5)')iobsarray
c
      if(iobsarray.eq.0)then
        write(*,'(a)')' - horizontal receiver array -'
        write(*,'(a)')' min. & max. latitude[deg], '
     &              //'# of samples (>= 1): '
        call getline(5,text)
        read(text,*)lat1,lat2,nlat
        write(11,'(a)')'# - horizontal receiver array -'
        write(11,'(a)')'# min. & max. latitude[deg], '
     &              //'# of samples (>= 1): '
        write(11,'(2f12.4,i7)')lat1,lat2,nlat
        if(nlat.le.0)then
          stop ' Error in gcdemo: bad nlat value!'
        else if(nlat.eq.1)then
          dlat=0.d0
        else
          dlat=(lat2-lat1)/dble(nlat-1)
        endif
        write(*,'(a)')' '
        write(*,'(a)')' min. & max. longitude[deg], '
     &              //'# of samples (>= 1): '
        call getline(5,text)
        read(text,*)lon1,lon2,nlon
        write(11,'(a)')'# min. & max. longitude[deg], '
     &              //'# of samples (>= 1): '
        write(11,'(2f12.4,i7)')lon1,lon2,nlon
        if(nlon.le.0)then
          stop ' Error in gcdemo: bad nlon value!'
        else if(nlon.eq.1)then
          dlon=0.d0
        else
          dlon=(lon2-lon1)/dble(nlon-1)
        endif
c
        write(*,'(a)')' - vertical receiver profile -'
        write(*,'(a)')' min. & max. receiver depth [km], '
     &              //'# of samples (>= 1): '
        call getline(5,text)
        read(text,*)z1,z2,nz
        write(11,'(a)')'# - vertical receiver profile -'
        write(11,'(a)')'# min. & max. receiver depth [km], '
     &              //'# of samples (>= 1): '
        write(11,'(2f12.4,i7)')z1,z2,nz
        z1=z1*km2m
        z2=z2*km2m
        if(nz.eq.1)then
          dz=0.d0
        else
          dz=(z2-z1)/dble(nz-1)
        endif
        nr=nz*nlat*nlon
      else
        write(*,'(a)')' observation array file'
        write(11,'(a)')'# observation array file'
c
        write(*,'(a)')' (one header line followed by 3 columns) '
        write(*,'(a)')' (Lat,Lon[deg],Dep[km]):'
        call getline(5,text)
        read(text,'(a)')obsarray
        write(11,'(a)')'# (one header line followed by 3 columns) '
        write(11,'(a)')'# (Lat,Lon[deg],Dep[km]):'
        write(11,'(a)')' '//obsarray
c
c       test read to find the number of locations
c
        open(30, file=obsarray,status='unknown')
        read(30,'(a)')text
        nr=0
401     read(30,*,end=402,err=402)lat,lon,dep
        nr=nr+1
        goto 401
402     close(30)
c
        write(*,'(i7,a)')nr,' observation locations read'
        write(11,'(a,i7,a)')'# ',nr,' observation locations read'
      endif
c
      if(nr.le.0)then
        stop ' Error in gcdemo: no observation location found!'
      endif
c
      allocate(latr(nr),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: latr not allocated!'
      allocate(lonr(nr),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lonr not allocated!'
      allocate(depr(nr),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: depr not allocated!'
      allocate(obs(22,nr),stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: obs not allocated!'
c
      if(iobsarray.eq.0)then
        ir=0
        do iz=1,nz
          do ilat=1,nlat
            do ilon=1,nlon
              ir=ir+1
              latr(ir)=lat1+dble(ilat-1)*dlat
              lonr(ir)=lon1+dble(ilon-1)*dlon
              depr(ir)=z1+dble(iz-1)*dz
            enddo
          enddo
        enddo
      else
        open(30, file=obsarray,status='unknown')
        read(30,'(a)')text
        do ir=1,nr
          call skipdoc(30)
          read(30,*)latr(ir),lonr(ir),depr(ir)
          depr(ir)=depr(ir)*km2m
        enddo
        close(30)
      endif
c
      close(11)
c
      write(*,'(a)')' ... please wait ...'
      runtime=time()
      do ir=1,nr
        do i=1,22
          obs(i,ir)=0.d0
        enddo
      enddo
c
c     because of limitation of array size used in the subroutine gcgrn, too large set
c     of source-observables needs to be processed in the way of several sub-sets
c
      if(ns*nr.le.nsnrmax)then
        call gcgrn(spatgrndir,ns,lats,lons,deps,spa,
     &             nr,latr,lonr,depr,obs)
      else if(nr.ge.ns)then
        dnr=1+nr/max0(1,(ns*nr)/nsnrmax)
        nr1=1
501     nr2=min0(nr,nr1+dnr-1)
        write(*,'(2(a,i6))')' ... process obs. locations #',
     &                      nr1,' -> #',nr2
        call gcgrn(spatgrndir,ns,lats,lons,deps,spa,
     &             1+nr2-nr1,latr(nr1),lonr(nr1),depr(nr1),obs(1,nr1))
        if(nr2.lt.nr)then
          nr1=nr2+1
          goto 501
        endif
      else
        allocate(dobs(22,nr),stat=ierr)
        if(ierr.ne.0)stop ' Error in gcdemo: dobs not allocated!'
c
        dns=1+ns/max0(1,(ns*nr)/nsnrmax)
        ns1=1
502     ns2=min0(ns,ns1+dns-1)
        write(*,'(2(a,i6))')' ... process point sources #',
     &                      ns1,' -> #',ns2
        do ir=1,nr
          do i=1,22
            dobs(i,ir)=0.d0
          enddo
        enddo
        call gcgrn(spatgrndir,
     &             1+ns2-ns1,lats(ns1),lons(ns1),deps(ns1),spa(0,ns1),
     &             nr,latr,lonr,depr,dobs)
        do ir=1,nr
          do i=1,22
            obs(i,ir)=obs(i,ir)+dobs(i,ir)
          enddo
        enddo
        if(ns2.lt.ns)then
          ns1=ns2+1
          goto 502
        endif
c
        deallocate(dobs,stat=ierr)
        if(ierr.ne.0)stop ' Error in gcdemo: dobs not deallocated!'
      endif
c
      open(40,file=outputfile,status='unknown')
      write(40,'(a,$)')'    Lat[deg]    Lon[deg]     Dep[km]'
c
c     observables:
c     U = displacement vector, E = strain tensor, Ro = rotation vector,
c     S = stress tensor, Gr = gravity vector, Pot = potential
c
c     components:
c     e = east, n = north, z = up, d = down
c
      if(selobs(1))then
        write(40,'(a,$)')'         Ue[m]         Un[m]         Uz[m]'
      endif
      if(selobs(2))then
        write(40,'(a,$)')'        Eee[-]        Een[-]        Eez[-]'
     &                 //'        Enn[-]        Enz[-]        Ezz[-]'
      endif
      if(selobs(3))then
        write(40,'(a,$)')'      Roe[rad]      Ron[rad]      Roz[rad]'
      endif
      if(selobs(4))then
        write(40,'(a,$)')'       See[Pa]       Sen[Pa]       Sez[Pa]'
     &                 //'       Snn[Pa]       Snz[Pa]       Szz[Pa]'
      endif
      if(selobs(5))then
        write(40,'(a,$)')'    Gre[m/s^2]    Grn[m/s^2]    Grd[m/s^2]'
      endif
      if(selobs(6))then
        write(40,'(a,$)')'  Pot[m^2/s^2]'
      endif
      write(40,'(a)')''

      do ir=1,nr
        write(40,'(3f12.6,$)')latr(ir),lonr(ir),depr(ir)/km2m
        if(selobs(1))write(40,'(3E14.6,$)')(obs(i,ir),i=1,3)
        if(selobs(2))write(40,'(6E14.6,$)')(obs(i,ir),i=4,9)
        if(selobs(3))write(40,'(3E14.6,$)')(obs(i,ir),i=10,12)
        if(selobs(4))write(40,'(6E14.6,$)')(obs(i,ir),i=13,18)
        if(selobs(5))write(40,'(3E14.6,$)')(obs(i,ir),i=19,21)
        if(selobs(6))write(40,'(E14.6,$)')obs(22,ir)
        write(40,'(a)')''
      enddo
      close(40)
c
      deallocate(deps,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: deps not deallocated!'
      deallocate(lats,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lats not deallocated!'
      deallocate(lons,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lons not deallocated!'
      deallocate(spa,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: spa not deallocated!'
c
      deallocate(latr,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: latr not deallocated!'
      deallocate(lonr,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: lonr not deallocated!'
      deallocate(depr,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: depr not deallocated!'
      deallocate(obs,stat=ierr)
      if(ierr.ne.0)stop ' Error in gcdemo: obs not deallocated!'
c
      runtime=time()-runtime
c
      print *,'######################################################'
      print *,'#                                                    #'
      print *,'#      End of computation with GETCOSEIS2018         #'
      print *,'#                                                    #'
      write(*,'(a,i5,a,i11,a)')' #  CPU: ',runtime,
     &     ' s for ',ns*nr*22,' source-observables.  #'
      print *,'#                                                    #'
      print *,'######################################################'
c
      stop
      end